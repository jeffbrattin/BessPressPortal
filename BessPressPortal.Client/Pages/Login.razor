@page "/login"
@using BessPressPortal.Shared.Models.Authentication
@using BessPressPortal.Client.Services
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthStateProvider AuthProvider

<h3>Login</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="loginModel.Email" placeholder="Enter email" />
        <ValidationMessage For="() => loginModel.Email" />
    </div>
    <div class="form-group">
        <label>Password</label>
        <InputText class="form-control" type="password" @bind-Value="loginModel.Password" placeholder="Enter password" />
        <ValidationMessage For="() => loginModel.Password" />
    </div>
    <button class="btn btn-primary" type="submit">Login</button>
</EditForm>

@code {
    private LoginRequest loginModel = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();
                if (authResponse?.Success == true && !string.IsNullOrEmpty(authResponse.Token))
                {
                    await AuthProvider.SetTokenAsync(authResponse.Token);
                    Navigation.NavigateTo("/");
                }
                else
                {
                    errorMessage = authResponse?.Message ?? "Login failed";
                }
            }
            else
            {
                var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();
                errorMessage = authResponse?.Message ?? "Invalid email or password";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}