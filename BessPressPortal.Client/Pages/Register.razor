@page "/register"
@using BessPressPortal.Shared.Models.Authentication
@using BessPressPortal.Client.Services
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthStateProvider AuthProvider

<h3>Register</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="registerModel.Email" placeholder="Enter email" />
        <ValidationMessage For="() => registerModel.Email" />
    </div>
    <div class="form-group">
        <label>Password</label>
        <InputText class="form-control" type="password" @bind-Value="registerModel.Password" placeholder="Enter password" />
        <ValidationMessage For="() => registerModel.Password" />
    </div>
    <div class="form-group">
        <label>Confirm Password</label>
        <InputText class="form-control" type="password" @bind-Value="registerModel.ConfirmPassword" placeholder="Confirm password" />
        <ValidationMessage For="() => registerModel.ConfirmPassword" />
    </div>
    <button class="btn btn-primary" type="submit">Register</button>
</EditForm>

@code {
    private RegisterRequest registerModel = new();
    private string? errorMessage;

    private async Task HandleRegister()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/register", registerModel);

            if (response.IsSuccessStatusCode)
            {
                var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();
                if (authResponse?.Success == true && !string.IsNullOrEmpty(authResponse.Token))
                {
                    await AuthProvider.SetTokenAsync(authResponse.Token);
                    Navigation.NavigateTo("/");
                }
                else
                {
                    errorMessage = authResponse?.Message ?? "Registration failed";
                }
            }
            else
            {
                var content = await response.Content.ReadAsStringAsync();
                errorMessage = $"Server returned {response.StatusCode}: {content}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }

    }
}